// HOTFIX TEMPORAIRE - √† injecter via la console
// Pour corriger l'erreur de cr√©ation de participant

console.log('üîß HOTFIX: Injection de la correction pour cr√©ation participant...');

// Red√©finir la fonction createSessionParticipant avec gestion d'erreur
if (typeof window.createSessionParticipantOriginal === 'undefined') {
    // Sauvegarder la fonction originale
    window.createSessionParticipantOriginal = window.createSessionParticipant;
    
    // Nouvelle fonction corrig√©e
    window.createSessionParticipant = async function() {
        console.log('üîß createSessionParticipant() HOTFIX appel√©e pour session:', currentSessionId);
        
        if (!api.isArbitre()) {
            showError('Seuls les arbitres peuvent cr√©er des participants');
            return;
        }
        
        if (!currentSessionId) {
            showError('Aucune session s√©lectionn√©e');
            return;
        }
        
        const firstNameEl = document.getElementById('create-participant-firstname');
        const emailEl = document.getElementById('create-participant-email');
        
        if (!firstNameEl || !emailEl) {
            showError('Formulaire de cr√©ation introuvable');
            return;
        }
        
        const firstName = firstNameEl.value.trim();
        const email = emailEl.value.trim();
        
        if (!firstName || !email) {
            showError('Veuillez remplir tous les champs');
            return;
        }
        
        try {
            setLoading(true);
            
            console.log('üì° Appel API createUser...');
            const response = await api.createUser({ firstName, email });
            console.log('üì° R√©ponse API HOTFIX:', response);
            
            if (response && response.success) {
                setLoading(false);
                
                const successMsg = response.emailSent 
                    ? 'Participant cr√©√© avec succ√®s ‚Ä¢ Email d\'invitation envoy√©'
                    : 'Participant cr√©√© avec succ√®s ‚Ä¢ Email simul√© (mode d√©veloppement)';
                
                showSuccess(successMsg);
                
                // Vider les champs
                firstNameEl.value = '';
                emailEl.value = '';
                
                console.log('üìß Lien d\'activation:', response.activationLink);
                
                // CORRECTION: Gestion robuste de l'ID
                let newUserId;
                console.log('üîç Structure de r√©ponse HOTFIX:', JSON.stringify(response, null, 2));
                
                if (response.user && response.user.id) {
                    newUserId = response.user.id;
                    console.log('‚úÖ ID participant r√©cup√©r√© (user):', newUserId);
                } else if (response.data && response.data.id) {
                    newUserId = response.data.id;
                    console.log('‚úÖ ID participant r√©cup√©r√© (data):', newUserId);
                } else if (response.id) {
                    newUserId = response.id;
                    console.log('‚úÖ ID participant r√©cup√©r√© (direct):', newUserId);
                } else {
                    console.error('‚ùå HOTFIX: Impossible de trouver l\'ID du participant');
                    showError('Participant cr√©√© mais impossible de r√©cup√©rer son ID');
                    return;
                }
                
                // Continuer avec l'ajout √† la session si ID trouv√©
                if (newUserId) {
                    console.log('üîß Ajout du participant √† la session...');
                    setTimeout(() => {
                        try {
                            backToSessionManagement();
                            setTimeout(() => {
                                console.log('üîÑ Rechargement de la session:', currentSessionId);
                                if (typeof manageTastingSession === 'function') {
                                    manageTastingSession(currentSessionId).then(() => {
                                        setTimeout(() => {
                                            console.log('üîÑ Basculement vers onglet participants');
                                            if (typeof showSessionTab === 'function') {
                                                showSessionTab('participants');
                                            }
                                        }, 200);
                                    }).catch(reloadError => {
                                        console.error('‚ùå Erreur rechargement session:', reloadError);
                                    });
                                }
                            }, 300);
                        } catch (error) {
                            console.error('‚ùå Erreur navigation HOTFIX:', error);
                        }
                    }, 1000);
                }
                
            } else {
                setLoading(false);
                showError('Erreur lors de la cr√©ation: ' + (response?.message || 'Erreur inconnue'));
            }
            
        } catch (error) {
            console.error('‚ùå Erreur cr√©ation participant HOTFIX:', error);
            showError('Erreur lors de la cr√©ation: ' + error.message);
            setLoading(false);
        }
    };
    
    console.log('‚úÖ HOTFIX: Fonction createSessionParticipant corrig√©e et inject√©e');
    console.log('üéØ Vous pouvez maintenant cr√©er des participants sans erreur');
}